// Mocks generated by Mockito 5.4.4 from annotations
// in to_do_and_weather/test/presentation/bloc/category/category_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:to_do_and_weather/domain/entities/category.dart' as _i4;
import 'package:to_do_and_weather/domain/usecases/category_usecases.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriesUseCase extends _i1.Mock
    implements _i2.GetCategoriesUseCase {
  @override
  _i3.Future<List<_i4.Category>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Category>>.value(<_i4.Category>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Category>>.value(<_i4.Category>[]),
      ) as _i3.Future<List<_i4.Category>>);
}

/// A class which mocks [GetCategoryByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoryByIdUseCase extends _i1.Mock
    implements _i2.GetCategoryByIdUseCase {
  @override
  _i3.Future<_i4.Category?> call(String? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i3.Future<_i4.Category?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Category?>.value(),
      ) as _i3.Future<_i4.Category?>);
}

/// A class which mocks [AddCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCategoryUseCase extends _i1.Mock
    implements _i2.AddCategoryUseCase {
  @override
  _i3.Future<void> call(_i4.Category? category) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [category],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [UpdateCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCategoryUseCase extends _i1.Mock
    implements _i2.UpdateCategoryUseCase {
  @override
  _i3.Future<void> call(_i4.Category? category) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [category],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [DeleteCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCategoryUseCase extends _i1.Mock
    implements _i2.DeleteCategoryUseCase {
  @override
  _i3.Future<void> call(String? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [InitDefaultCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitDefaultCategoriesUseCase extends _i1.Mock
    implements _i2.InitDefaultCategoriesUseCase {
  @override
  _i3.Future<void> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
